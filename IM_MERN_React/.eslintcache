[{"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js":"1","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js":"2","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js":"3","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js":"4","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js":"5","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js":"6","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js":"7","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js":"8","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js":"9","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js":"10","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js":"11","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js":"12","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js":"13","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js":"14","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js":"15","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js":"16","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js":"17","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js":"18","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js":"19","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js":"20","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js":"21","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js":"22","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js":"23","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js":"24","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AssigneeDropdown.js":"25","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\index.js":"26","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\reportWebVitals.js":"27","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\App.js":"28","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\rootReducer.js":"29","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\NavBar.js":"30","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Login\\Login.js":"31","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\IncidentLisiting.js":"32","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\IncidentDetails.js":"33","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\AddNew.js":"34","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\UsersList.js":"35","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\AddUser.js":"36","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\signalR\\Receiver.js":"37","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\usersReducer.js":"38","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\incidentsReducer.js":"39","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\userLoginReducer.js":"40","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\notificationsReducer.js":"41","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\PageActions.js":"42","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Notifications.js":"43","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Incident.js":"44","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Pages.js":"45","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Comments.js":"46","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\AssigneeDropdown.js":"47","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\User.js":"48","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\incidentsActions.js":"49","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\usersActions.js":"50","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\notificationsActions.js":"51","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\userLoginActions.js":"52","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\api\\apiURLs.js":"53","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Comment.js":"54","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\signalR\\sender.js":"55","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js":"56","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js":"57","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\LastFive.js":"58","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js":"59","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js":"60","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js":"61","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js":"62","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\dashboardActions.js":"63"},{"size":1122,"mtime":1608337289896,"results":"64","hashOfConfig":"65"},{"size":1422,"mtime":1610653728856,"results":"66","hashOfConfig":"65"},{"size":362,"mtime":499162500000,"results":"67","hashOfConfig":"65"},{"size":2730,"mtime":1609696317922,"results":"68","hashOfConfig":"65"},{"size":475,"mtime":1610577481815,"results":"69","hashOfConfig":"65"},{"size":1112,"mtime":1610888211543,"results":"70","hashOfConfig":"65"},{"size":839,"mtime":1610888214670,"results":"71","hashOfConfig":"65"},{"size":4705,"mtime":1610891781625,"results":"72","hashOfConfig":"65"},{"size":1899,"mtime":1610653460414,"results":"73","hashOfConfig":"65"},{"size":3022,"mtime":1610888057784,"results":"74","hashOfConfig":"65"},{"size":3369,"mtime":1610889923417,"results":"75","hashOfConfig":"65"},{"size":3027,"mtime":1609884362954,"results":"76","hashOfConfig":"65"},{"size":1130,"mtime":1608419315181,"results":"77","hashOfConfig":"65"},{"size":6867,"mtime":1610913369586,"results":"78","hashOfConfig":"65"},{"size":13188,"mtime":1610906928345,"results":"79","hashOfConfig":"65"},{"size":3921,"mtime":1610406658281,"results":"80","hashOfConfig":"65"},{"size":263,"mtime":1608746276170,"results":"81","hashOfConfig":"65"},{"size":6483,"mtime":1608752688290,"results":"82","hashOfConfig":"65"},{"size":1222,"mtime":1610815908462,"results":"83","hashOfConfig":"65"},{"size":5074,"mtime":1610914199520,"results":"84","hashOfConfig":"65"},{"size":1171,"mtime":1610888268575,"results":"85","hashOfConfig":"65"},{"size":1946,"mtime":1610817918528,"results":"86","hashOfConfig":"65"},{"size":2127,"mtime":1610753476287,"results":"87","hashOfConfig":"65"},{"size":1577,"mtime":1610752997050,"results":"88","hashOfConfig":"65"},{"size":4612,"mtime":1610906719874,"results":"89","hashOfConfig":"65"},{"size":1122,"mtime":1608337289896,"results":"90","hashOfConfig":"91"},{"size":362,"mtime":499162500000,"results":"92","hashOfConfig":"91"},{"size":1557,"mtime":1631132965271,"results":"93","hashOfConfig":"91"},{"size":475,"mtime":1610577481815,"results":"94","hashOfConfig":"91"},{"size":3361,"mtime":1631133540515,"results":"95","hashOfConfig":"91"},{"size":2730,"mtime":1609696317922,"results":"96","hashOfConfig":"91"},{"size":4911,"mtime":1613915328780,"results":"97","hashOfConfig":"91"},{"size":25631,"mtime":1613916204619,"results":"98","hashOfConfig":"91"},{"size":13191,"mtime":1613399031034,"results":"99","hashOfConfig":"91"},{"size":3922,"mtime":1613951883607,"results":"100","hashOfConfig":"91"},{"size":6484,"mtime":1613951654492,"results":"101","hashOfConfig":"91"},{"size":1674,"mtime":1614125939563,"results":"102","hashOfConfig":"91"},{"size":839,"mtime":1610888214670,"results":"103","hashOfConfig":"91"},{"size":4721,"mtime":1614100422076,"results":"104","hashOfConfig":"91"},{"size":1127,"mtime":1613843361739,"results":"105","hashOfConfig":"91"},{"size":1209,"mtime":1613937749348,"results":"106","hashOfConfig":"91"},{"size":1130,"mtime":1608419315181,"results":"107","hashOfConfig":"91"},{"size":5101,"mtime":1613937051165,"results":"108","hashOfConfig":"91"},{"size":2456,"mtime":1613566758248,"results":"109","hashOfConfig":"91"},{"size":3036,"mtime":1613517048084,"results":"110","hashOfConfig":"91"},{"size":3750,"mtime":1613915486555,"results":"111","hashOfConfig":"91"},{"size":4615,"mtime":1613517739489,"results":"112","hashOfConfig":"91"},{"size":390,"mtime":1613952457326,"results":"113","hashOfConfig":"91"},{"size":7378,"mtime":1614212172528,"results":"114","hashOfConfig":"91"},{"size":1875,"mtime":1614127016778,"results":"115","hashOfConfig":"91"},{"size":1537,"mtime":1614125697427,"results":"116","hashOfConfig":"91"},{"size":2117,"mtime":1616343960079,"results":"117","hashOfConfig":"91"},{"size":1575,"mtime":1631133665072,"results":"118","hashOfConfig":"91"},{"size":5410,"mtime":1613845571877,"results":"119","hashOfConfig":"91"},{"size":1892,"mtime":1613848423648,"results":"120","hashOfConfig":"91"},{"size":920,"mtime":1631133580041,"results":"121","hashOfConfig":"91"},{"size":1562,"mtime":1628704352604,"results":"122","hashOfConfig":"91"},{"size":2487,"mtime":1627941383006,"results":"123","hashOfConfig":"91"},{"size":2541,"mtime":1627399953979,"results":"124","hashOfConfig":"91"},{"size":2789,"mtime":1628707525868,"results":"125","hashOfConfig":"91"},{"size":2573,"mtime":1627941395118,"results":"126","hashOfConfig":"91"},{"size":2089,"mtime":1627420814412,"results":"127","hashOfConfig":"91"},{"size":3218,"mtime":1631132631161,"results":"128","hashOfConfig":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"wm3clw",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"131"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"131"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"131"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"131"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"131"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"131"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"131"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"131"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"131"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"131"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"131"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},"atrob9",{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"194"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"194"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"194"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"194"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"194"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"194"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"194"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"194"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"194"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"194"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"194"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"194"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"194"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"194"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"194"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"194"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"194"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"194"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"194"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"194"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js",[],["288","289"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js",["290"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js",["291"],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\n// export const logIn = (credentials) => {\r\n//     return (dispatch, getState) => {     \r\n//         axios({\r\n//             method: 'post',\r\n//             //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n//             url : usersUrls.tokenUrl,\r\n//             headers: {'Content-type': 'application/x-www-form-urlencoded'}, \r\n//             data: qs.stringify({\r\n//                 grant_type: 'password',\r\n//                 username: credentials.username,\r\n//                 password: credentials.password \r\n//             }),\r\n//           })\r\n//           .then((response)=>{              \r\n//               const loginData = {\r\n//                   token : response.data.access_token,\r\n//                   Name :  response.data.Name,\r\n//                   User_Id :  response.data.User_Id\r\n//               }\r\n//               dispatch({ type: 'LOGIN_PASS', loginData });\r\n//           })\r\n//           .catch((err)=>{\r\n//                    dispatch({ type: 'LOGIN_FAIL'});\r\n//                    console.log(err);\r\n//           });    \r\n//     }\r\n//   }\r\n\r\n  export const logIn = (credentials) => {\r\n    return (dispatch, getState) => {   \r\n         axios({\r\n            method: 'post',\r\n            //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n            url : usersUrls.authenticateUrl,\r\n            headers: {'Content-type': 'application/json'}, \r\n            data: {               \r\n                Username: credentials.username,\r\n                Password: credentials.password \r\n            },\r\n          })\r\n          .then((response)=>{              \r\n              const loginData = {\r\n                  token : response.data.Token,\r\n                  Name :  response.data.user.FirstName + \" \" +  response.data.user.LastName,\r\n                  User_Id :  response.data.user.Id\r\n              }\r\n              dispatch({ type: 'LOGIN_PASS', loginData });\r\n          })\r\n          .catch((err)=>{\r\n                   dispatch({ type: 'LOGIN_FAIL'});\r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n  \r\n  \r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {     \r\n      dispatch({ type: 'SIGN_OUT', data:null });\r\n    }\r\n  }\r\n  \r\n  export const signUp = (newUser) => {\r\n    return (dispatch, getState) => {     \r\n    }\r\n  }\r\n\r\n  export const updateHubId = (hubId, userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.updateHubIdUrl \r\n        axios.post(url, {\r\n          HubId : hubId,\r\n          UserId : userId\r\n        })\r\n          .then((response)=>{          \r\n          \r\n             dispatch({ type: 'UPDATE_HUB', hubId });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js",["292","293","294","295"],"import {React} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Navbar.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Notifications from './Notifications';\r\nimport { signOut } from \"../store/actions/userLoginActions\";\r\n\r\nfunction NavBar({user_Name, loginError, token, signOut}) {\r\n\r\n  if (!token){\r\n    alert(\"Your session has been expired. Please login again.\")\r\n    return <Redirect to='/' /> \r\n  } \r\n  // if (loginError) return <Redirect to='/' /> \r\n   \r\n    return (\r\n      <nav className=\"nav-wrapper indigo darken-4\">\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n            <NavLink to=\"/incidentListing\" className=\"brand-logo\">             \r\n              Incident Manager\r\n            </NavLink>\r\n          </div>\r\n          <a href=\"#\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\r\n            <i className=\"material-icons\">menu</i>\r\n          </a>\r\n          <ul className=\"right hide-on-med-and-down\">\r\n            <li>     \r\n              <NavLink to=\"/incidentListing\" >             \r\n                 Incidents\r\n              </NavLink> \r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" >             \r\n                   Users \r\n                </NavLink>              \r\n            </li>            \r\n            {/* <li onClick={()=> commentSent(\"Hi please work.\")}>              */}\r\n           \r\n              <Notifications />\r\n            <li>\r\n                <button type=\"button\" title={user_Name} className=\"btn-floating  orange darken-3 userWelcome\" >\r\n                  {user_Name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')} \r\n                 </button>\r\n            </li>\r\n            <li className=\" singout-btn\">\r\n             <a> <i className=\"material-icons\" onClick={signOut}>settings_power</i> </a>\r\n            </li>\r\n          </ul>\r\n          {/* for mobile */}\r\n          <ul className=\"sidenav grey lighten-2\" id=\"mobile-menu\">\r\n            <li>\r\n              <NavLink to=\"/incidentListing\"  className=\"sidenav-close\">             \r\n                  Incidents\r\n                </NavLink>               \r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/UsersList\" className=\"sidenav-close\">             \r\n                       Users\r\n                  </NavLink>            \r\n            </li>\r\n            <li>\r\n                 <a> <i className=\"material-icons\" onClick={signOut}>settings_power</i> </a>        \r\n            </li>\r\n            \r\n            <li>\r\n              <a href=\"\" className=\" white-text\">\r\n                <i className=\"material-icons\">notifications</i>\r\n                <span className=\"Indigo-text\">5</span>\r\n              </a>\r\n             \r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{      \r\n      user_Name :state.userLogin.user_Name, // Logged in User's name\r\n      userId :state.userLogin.userId,  // logged in User Id      \r\n      loginError : state.userLogin.loginError,\r\n      token : state.userLogin.token   \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut())\r\n \r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js",["296","297"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\n\r\n\r\n\r\nexport default function Pages({TotalPages, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pages = [];\r\n    for(let i = 1; i <= Math.ceil(TotalPages / PostsPerPage) ; i++ )\r\n    {\r\n        pages.push(i);\r\n    }\r\n\r\n    const pageNumberClick = (p) =>{\r\n        if(p <1 || p > pages.length)\r\n            return;\r\n        setPageNumber(p);\r\n        setCurrentPage(p);\r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n    }, [search])\r\n\r\n    pages = pages.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={() => pageNumberClick(p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n  \r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"input-field col s12 m4 l4\">\r\n                            <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                             ref={ddlRef}  >\t\t\t\t\t\t\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"35\">35</option>\r\n                                <option value=\"40\">40</option>\r\n                                <option value=\"45\">45</option>\r\n                                <option value=\"50\">50</option>\r\n                            </select>\t\r\n                        <label>Page Size</label>\t\t\t\t\t\t\r\n        </div>\r\n        <div className=\"input-field col s12 m8 l8\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>\r\n                </a>\r\n            </li>\r\n            {pages}\r\n            <li\r\n                className={ currentPage === pages.length ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js",["298","299","300"],"import React from 'react'\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"title\">{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js",["301"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (userId) => {       \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee.Id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalDeta\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user.Id} onClick= {()=>assigneeSelected(user.Id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                      Start Time (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                       Start Time (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js",["302"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div class=\"preloader-wrapper container big active page-loader\">\r\n        <div class=\"spinner-layer spinner-blue-only\">\r\n          <div class=\"circle-clipper left\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"gap-patch\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"circle-clipper right\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user.Id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js",["303","304"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js",["305"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\n\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(\r\n     notifications.filter((notification) => !notification.IsRead).length\r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n       notifications.filter((notification) => !notification.IsRead).length\r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification.Id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification.Id}>\r\n                   <div className={classes}>\r\n                     <div className=\"row\">\r\n                       <div className=\"col s2\">\r\n                         {notification.IsRead ? (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Unread\"\r\n                             onClick={() => setStatus(notification.Id, false)}\r\n                           >\r\n                             radio_button_unchecked\r\n                           </i>\r\n                         ) : (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Read\"\r\n                             onClick={() => setStatus(notification.Id, true)}\r\n                           >\r\n                             radio_button_checked\r\n                           </i>\r\n                         )}\r\n                       </div>\r\n                       <div className=\"col s10 right\">\r\n                         <p onClick={() => openIncident(notification)}>\r\n                           {\" \"}\r\n                           {notification.NotifyAbout}\r\n                         </p>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js",["306"],"import {React, useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {  JsonHubProtocol,   \r\n    HubConnectionBuilder,\r\n    LogLevel\r\n} from '@microsoft/signalr';\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions'\r\n\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications}) {\r\n\r\n    useEffect(() => {   \r\n        \r\n        const newConnection = new HubConnectionBuilder()\r\n        .withUrl('https://localhost:44310/hubs/notifications')\r\n        .withAutomaticReconnect()\r\n        .withHubProtocol(new JsonHubProtocol())\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n        console.log(\"newConnection\",newConnection);\r\n        newConnection.start()\r\n        .then(result => {\r\n            console.log('Connected!');\r\n            let hubId = newConnection.connectionId; \r\n            updateHubId(hubId, userId);\r\n            \r\n            newConnection.on('ReceiveMessage', (message) => {\r\n                console.log(message);\r\n                 commentRecieved(message);\r\n            });\r\n            newConnection.on('UpdateNotifications', (incidentId) => {\r\n              console.log(incidentId);\r\n              refreshNotifications(userId);\r\n          });\r\n\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n     \r\n    }, [])\r\n\r\n \r\n\r\n    return (\r\n        <>            \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id       \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js",[],["307","308"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AssigneeDropdown.js",["309","310"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    \r\n    const assigneeRef = useRef();\r\n\r\n    useEffect(() => {       \r\n        getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (userId) => {\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target=\"dropdownAssginee\"\r\n                            placeholder=\"\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          />\r\n\r\n                          <ul id=\"dropdownAssginee\" className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={() => assigneeSelected(user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\index.js",[],["311","312"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\reportWebVitals.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\App.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\NavBar.js",["313","314","315","316"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Login\\Login.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\IncidentLisiting.js",["317","318"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport Incident from './Incident'\r\nimport PageActions from \"../PageActions\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { incidentsWithPage, cancel } from \"../../store/actions/incidentsActions\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\n\r\n function IncidentLisiting(props) {\r\n   \r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n      props.getAllAssignees();      \r\n    }, []);\r\n\r\n\r\n   \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search            \r\n        }        \r\n        setLoading(true);\r\n        props.incidentsWithPage(parameters);\r\n        setLoading(false);\r\n        return () => {\r\n          cancel();        // cancel axios  \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      const data = false;\r\n      props.dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n      let path = '/AddNew';      \r\n      history.push(path);\r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n      let user = props.allAssignees.find((assignee) => {\r\n        return assignee._id === id;\r\n      });   \r\n      if(!user){    \r\n        return id;\r\n      }\r\n      return user.FirstName + \" \" + user.LastName\r\n    }\r\n\r\n    if(props.Error!==\"\"){\r\n      return (\r\n        <div className=\"container\">\r\n          <h1 className=\"center red-text\">Error</h1>\r\n          <h5 className=\"center\">{props.Error}</h5>\r\n          <p className=\"center\">Please check your network and try loging back.</p>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Incidents\"} /> \r\n        { loading? <h1>Loading</h1> : null}\r\n        { props.TotalIncidents === 0? <h1>Zero</h1> : null}\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\" id=\"search\" value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>Title</th>\r\n                      <th>Description</th>\r\n                      <th>Assigned TO</th>\r\n                      <th>Created By</th>\r\n                      <th>Created Date</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                      props.Incidents.map(incident=>{\r\n                          return (\r\n                            <Incident key={incident._id} incident= {incident} getUserNameById={getUserNameById} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalIncidents} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        allAssignees: state.users.users,\r\n        Incidents : state.incidents.Incidents,\r\n        TotalIncidents : state.incidents.TotalIncidents,\r\n        Error : state.incidents.IncidentsError   // if there is an error while getting data from API\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        incidentsWithPage: (parameters) => dispatch(incidentsWithPage(parameters)),\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        dispatch:dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentLisiting);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\IncidentDetails.js",["319","320","321","322","323"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport PageActions from \"../PageActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { getIncidentById, updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport Comments from \"./Comments\";\r\nimport  AssigneeDropdown  from \"./AssigneeDropdown\";\r\nimport \"../../styles/incidentDetails.css\";\r\nimport moment from \"moment\";\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\n\r\nfunction IncidentDetails({\r\n  match,\r\n  incidentData,\r\n  getIncidentById,\r\n  allAssignees,\r\n  getAllAssignees,\r\n  userId,\r\n  updateIncident,\r\n  deleteAttachment,\r\n  IncidentDetailError\r\n  \r\n}) {\r\n \r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [additionalDetails, setAdditionalDetails] = useState(\"\"); \r\n  const [assignee, setAssignee] = useState(null);\r\n  const [status, setStatus] = useState('N');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  \r\n  const [assigneeName, setAssigneeName] = useState(\"\");  \r\n\r\n  const [editTitle, setEditTitle] = useState(false);\r\n  const [editDescription, setEditDescription] = useState(false);\r\n  const [editAdditionalDetails, setEditAdditionalDetails] = useState(false);\r\n  const [editDueDate, setEditDueDate] = useState(false);\r\n  const [editStartDate, setEditStartDate] = useState(false);\r\n  \r\n  const statusRef = useRef();\r\n  const dueDateTimeRef= useRef();\r\n  const dueDateDateRef= useRef();\r\n  const startTimeTimeRef = useRef();\r\n  const startTimeDateRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setMaterializeCSS();\r\n  }, [incidentData]);\r\n\r\n  useEffect(() => {    \r\n    getIncidentById(match.params.id);   \r\n  }, [match.params.id]); // whenever Id changes get new\r\n\r\n  useEffect(() => {  // To update Fields\r\n    if(incidentData){\r\n      setTitle(incidentData.Title);\r\n      setDescription(incidentData.Description);\r\n      setAdditionalDetails(incidentData.AdditionalData); \r\n      let currentAssignee =  allAssignees.find((assignee) => {\r\n        return assignee._id === incidentData.AssignedTo;\r\n      });\r\n      setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);  \r\n      setStatus(incidentData.Status);\r\n      setDueDate(incidentData.DueDate);\r\n      setStartTime(incidentData.StartTime);\r\n    }\r\n  }, [incidentData]);\r\n\r\n  const setMaterializeCSS = () => { \r\n    M.FormSelect.init(statusRef.current);\r\n    M.Datepicker.init(startTimeDateRef.current);\r\n    M.Timepicker.init(startTimeTimeRef.current);\r\n    M.Datepicker.init(dueDateDateRef.current);\r\n    M.Timepicker.init(dueDateTimeRef.current);\r\n  }\r\n\r\n  const getNameById = (id) => {   \r\n    let user = allAssignees.find((assignee) => {\r\n      return assignee._id === id;\r\n    });   \r\n    if(!user){    \r\n      return id;\r\n    }\r\n    return user.FirstName + \" \" + user.LastName\r\n  }\r\n \r\n  const downloadFile = (file) => {\r\n    console.log(file);\r\n    window.open(\r\n          incidentsUrls.downloadFileUrl\r\n           + \"type=incident\"\r\n           + \"&commentId=\" + \"\" \r\n           + \"&incidentId=\" + incidentData._id\r\n           + \"&filename=\" + file.FileName\r\n           + \"&contentType=\" + file.ContentType\r\n    ); \r\n  }\r\n\r\n  const titleEditClick = () =>{\r\n    setEditTitle(!editTitle);\r\n    setTitle(incidentData.Title);\r\n  }\r\n  const titleEditCancel = () =>{\r\n    setTitle(incidentData.Title);\r\n    setEditTitle(false);\r\n  }\r\n\r\n  const titleEditSave = () =>{\r\n    if(title.trim() === \"\"){\r\n      alert(\"Title cannot be empty.\");\r\n      setTitle(incidentData.Title);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Title\" , title.trim());\r\n    setEditTitle(false);\r\n  }\r\n\r\n  const descriptionEditClick = () =>{\r\n    setEditDescription(!editDescription);\r\n    setDescription(incidentData.Description);\r\n   \r\n  }\r\n  const descriptionEditCancel = () =>{\r\n    setDescription(incidentData.Description);\r\n    setEditDescription(false);\r\n  }\r\n\r\n  const descriptionEditSave = () =>{\r\n    if(description.trim() === \"\"){\r\n      alert(\"Description cannot be empty.\");\r\n      setDescription(incidentData.Description);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Description\" , description.trim());\r\n    setEditDescription(false);\r\n  }\r\n\r\n  const additionalDetailsEditClick = () =>{\r\n    setEditAdditionalDetails(!editAdditionalDetails);\r\n    setAdditionalDetails(incidentData.AdditionalData);\r\n  }\r\n  const additionalDetailsEditCancel = () =>{\r\n    setAdditionalDetails(incidentData.AdditionalData);\r\n    setEditAdditionalDetails(false);\r\n  }\r\n\r\n  const additionalDetailsEditSave = () =>{\r\n    updateIncidentByField(\"AdditionalData\" , additionalDetails.trim());\r\n    setEditAdditionalDetails(false);    \r\n  }\r\n\r\n  const dueDateEditClick = () =>{\r\n    setEditDueDate(!editDueDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const dueDateEditCancel = () =>{\r\n    setEditDueDate(false);\r\n  }\r\n\r\n  const dueDateEditSave = () =>{    \r\n    if ( dueDateDateRef.current.value === \"\" ||  dueDateTimeRef.current.value === \"\" ) {\r\n      alert(\"Please select date and time.\");\r\n      setEditDueDate(false);\r\n      return;\r\n    } \r\n\r\n    let dueDateTemp  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDateTemp = (dueDateTemp.getMonth() + 1) + \"/\" + dueDateTemp.getDate() + \"/\" +  dueDateTemp.getFullYear() \r\n                + \" \" + dueDateTemp.getHours() + \":\" + dueDateTemp.getMinutes() + \":\" + dueDateTemp.getSeconds(); \r\n      updateIncidentByField(\"DueDate\" , dueDateTemp);     \r\n      setEditDueDate(false);\r\n      setDueDate(dueDateTemp);\r\n   }\r\n\r\n  const startDateEditClick = () =>{\r\n    setEditStartDate(!editStartDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const startDateEditCancel = () =>{\r\n    setEditStartDate(false);\r\n  }\r\n\r\n  const startDateEditSave = () =>{\r\n  \r\n   if ( startTimeDateRef.current.value === \"\" ||  startTimeTimeRef.current.value === \"\" ) {\r\n    alert(\"Please select date and time.\");\r\n    setEditStartDate(false);\r\n    return;\r\n  } \r\n\r\n  let startTimeTemp  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n  startTimeTemp = (startTimeTemp.getMonth() + 1) + \"/\" + startTimeTemp.getDate() + \"/\" +  startTimeTemp.getFullYear() \r\n                + \" \" + startTimeTemp.getHours() + \":\" + startTimeTemp.getMinutes() + \":\" + startTimeTemp.getSeconds();  \r\n    updateIncidentByField(\"StartTime\" , startTimeTemp);   \r\n    setEditStartDate(false); \r\n    setStartTime(startTimeTemp);  \r\n  }\r\n\r\n  const updateIncidentByField = (field , value) => {    \r\n    let parameters = {\r\n      IncidentId : incidentData._id,\r\n      Parameter : field,\r\n      Value : value,\r\n      UserId : userId\r\n    };\r\n    console.log(parameters);\r\n    updateIncident(parameters); // Calling action here\r\n  }\r\n\r\n  const statusChanged = (e) => {\r\n    setStatus(e.target.value);\r\n    updateIncidentByField(\"Status\" , e.target.value);\r\n  }\r\n\r\n  const deleteIncidentAttachment = (file) => {        \r\n    if(window.confirm(\"Are you sure you want to delete this attachment.\" + file.FileName)){\r\n      deleteAttachment(\"incicent\" , userId, incidentData._id , file);\r\n    }      \r\n   }\r\n\r\n   if(IncidentDetailError !== \"\"){\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"center red-text\">Error</h1>\r\n        <h5 className=\"center\">{IncidentDetailError}</h5>\r\n        <p className=\"center\">Please check your network and try loging back.</p>\r\n      </div>\r\n    )\r\n   }\r\n\r\n  if (!incidentData || !allAssignees) {    \r\n    return  ( \r\n     \r\n              <div class=\"preloader-wrapper container big active page-loader\">\r\n                <div class=\"spinner-layer spinner-blue-only\">\r\n                  <div class=\"circle-clipper left\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"gap-patch\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"circle-clipper right\">\r\n                    <div class=\"circle\"></div>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <link rel=\"stylesheet\" href=\"./Styles/incidentDetails.css\"></link>\r\n      <PageActions Title={\"Incident Details\"} />\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 l12 \">\r\n              <div className=\"row\">\r\n                <div className=\"col s9\">\r\n                  {!editTitle ? (\r\n                    <h5 className=\"left indigo-text darken-4\">\r\n                      {\" \"}\r\n                      {/* Title  */}\r\n                      {title}\r\n                      <i\r\n                        className=\"material-icons actions-icon\"\r\n                        onClick={titleEditClick}\r\n                      >\r\n                        edit\r\n                      </i>\r\n                    </h5>\r\n                  ) : (\r\n                    <div className=\"input-field\">\r\n                      {\" \"}\r\n                      {/* Title Edit */}\r\n                      <input\r\n                        type=\"text\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                      />\r\n                      <button\r\n                        title=\"Save\"\r\n                        className=\"btn green darken-2 right updateBtn\"\r\n                        onClick={titleEditSave}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">check</i>\r\n                      </button>\r\n                      <button\r\n                        title=\"Cancel\"\r\n                        className=\"btn yellow darken-2 right updateBtn\"\r\n                        onClick={titleEditCancel}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">cancel</i>\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"col s3\">\r\n                  {\" \"}\r\n                  {/* IM Major Action Edit */}\r\n                  <h5>\r\n                    {\" \"}\r\n                    <span\r\n                      className=\"im-createTime black-text \"\r\n                      title={moment(new Date(incidentData.createdAt)).format(\r\n                        \"MMMM DD YYYY, h:mm:ss a\"\r\n                      )}\r\n                    >\r\n                      Created by{\" \"}\r\n                      <a className=\"username\">\r\n                        {\" \"}\r\n                        {getNameById(incidentData.CreatedBy)}{\" \"}\r\n                      </a>{\" \"}\r\n                      - {moment(new Date(incidentData.createdAt)).fromNow()}\r\n                    </span>\r\n                  </h5>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col s12 l6\">\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    Description :\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*   Additional Details */}\r\n                    Additional Details :\r\n                    <i\r\n                      className=\"inline-icon material-icons\"\r\n                      onClick={additionalDetailsEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editAdditionalDetails ? (\r\n                    <div className=\"input-field\">\r\n                      <p className=\"darkslategrayText bigTextScroll\">\r\n                        {additionalDetails}\r\n                      </p>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"input-field\">\r\n                      {\" \"}\r\n                      {/*   Additional Details Edit */}\r\n                      <textarea\r\n                        className=\"materialize-textarea\"\r\n                        value={additionalDetails}\r\n                        onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                      ></textarea>\r\n                      <button\r\n                        title=\"Save\"\r\n                        className=\"btn green darken-2 right updateBtn\"\r\n                        onClick={additionalDetailsEditSave}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">check</i>\r\n                      </button>\r\n                      <button\r\n                        title=\"Cancel\"\r\n                        className=\"btn yellow darken-2 right updateBtn\"\r\n                        onClick={additionalDetailsEditCancel}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">cancel</i>\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*  Attachments */}\r\n                    <i className=\"material-icons inline-icon\">attachment</i>\r\n                    Attachments:\r\n                  </p>\r\n\r\n                  <div className=\"input-field\">\r\n                    <ul className=\"input-field incidentFiles\">\r\n                      {!incidentData.Attachments\r\n                        ? null\r\n                        : incidentData.Attachments.map((file) => {\r\n                            return (\r\n                              <li\r\n                                key={file._id}\r\n                                className=\"center indigo-text darken-4\"\r\n                              >\r\n                                <i\r\n                                  title=\"Remove\"\r\n                                  className=\"actions-icon material-icons red-text inline-icon\"\r\n                                  onClick={() => deleteIncidentAttachment(file)}\r\n                                >\r\n                                  cancel\r\n                                </i>\r\n                                <span\r\n                                  title={file.FileName}\r\n                                  onClick={() => downloadFile(file)}\r\n                                >\r\n                                  {file.FileName.length > 35\r\n                                    ? file.FileName.slice(0, 35) + \"...\"\r\n                                    : file.FileName}\r\n                                </span>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <Comments\r\n                    userId={userId}\r\n                    incidentId={incidentData._id}\r\n                    comments={incidentData.Comments}\r\n                    getNameById={getNameById}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col s12 l5 offset-l1  ID-dropdowns\">\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Assignee\r\n                          </p>\r\n                        </td>\r\n                        <td>                         \r\n                          <AssigneeDropdown\r\n                            updateIncidentByField={updateIncidentByField}\r\n                            setAssignee={setAssignee}\r\n                            assigneeName = {assigneeName}\r\n                            setAssigneeName = {setAssigneeName}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Status{\" \"}\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          <select\r\n                            ref={statusRef}\r\n                            value={status}\r\n                            onChange={statusChanged}\r\n                          >\r\n                            <option value=\"N\" disabled >\r\n                              New\r\n                            </option>\r\n                            <option value=\"I\">In Progress</option>\r\n                            <option value=\"C\">Closed</option>\r\n                            <option value=\"A\">Approved</option>\r\n                          </select>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Due Date\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={dueDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editDueDate ? (\r\n                            <p\r\n                              title={moment(dueDate).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(dueDate).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editDueDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateDate\"\r\n                                className=\"datepicker\"\r\n                                ref={dueDateDateRef}\r\n                              />\r\n                              <label htmlFor=\"dueDateDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateTime\"\r\n                                className=\"timepicker\"\r\n                                ref={dueDateTimeRef}\r\n                              />\r\n                              <label htmlFor=\"dueDateTime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={dueDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={dueDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Start Time\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={startDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editStartDate ? (\r\n                            <p\r\n                              title={moment(startTime).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(startTime).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editStartDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"startTimeDate\"\r\n                                className=\"datepicker\"\r\n                                ref={startTimeDateRef}\r\n                              />\r\n                              <label htmlFor=\"startTimeDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                readOnly\r\n                                type=\"text\"\r\n                                id=\"startTimeTime\"\r\n                                className=\"timepicker\"\r\n                                ref={startTimeTimeRef}\r\n                              />\r\n                              <label htmlFor=\"startTimeime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={startDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={startDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id  \r\n    IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllAssignees: () => dispatch(allUsers()),\r\n    getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDetails);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\AddNew.js",["324"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (userId) => {       \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee._id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalData\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user._id} onClick= {()=>assigneeSelected(user._id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                      Start Time (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                       Start Time (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\UsersList.js",["325"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div class=\"preloader-wrapper container big active page-loader\">\r\n        <div class=\"spinner-layer spinner-blue-only\">\r\n          <div class=\"circle-clipper left\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"gap-patch\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"circle-clipper right\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user._id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\AddUser.js",["326","327"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", phone ); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\signalR\\Receiver.js",["328"],"import {React, useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions'\r\n\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications, token}) {\r\n\r\n    useEffect(() => { \r\n        let socket = socketIOClient(\"http://localhost:5555\", {\r\n          extraHeaders: {\r\n            \"x-access-token\": token\r\n        }});\r\n        socket.on('connect', function() {\r\n          const sessionID = socket.id; //\r\n          console.log('socket id : ' + sessionID);\r\n          updateHubId(sessionID, userId);\r\n        });\r\n\r\n        socket.on('UpdateNotifications', function(incidentId) {\r\n          console.log(incidentId + \" has been updated.\");\r\n          refreshNotifications(userId);\r\n        });\r\n     \r\n    }, []) \r\n\r\n    return (\r\n        <>            \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      token : state.userLogin.token     \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\usersReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\incidentsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\userLoginReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\reducers\\notificationsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\PageActions.js",["329","330","331"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Notifications.js",["332"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\n\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(\r\n     notifications.filter((notification) => !notification.IsRead).length\r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n       notifications.filter((notification) => !notification.IsRead).length\r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     console.log(id);\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification._id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification._id}>\r\n                   <div className={classes}>\r\n                     <div className=\"row\">\r\n                       <div className=\"col s2\">\r\n                         {notification.IsRead ? (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Unread\"\r\n                             onClick={() => setStatus(notification._id, false)}\r\n                           >\r\n                             radio_button_unchecked\r\n                           </i>\r\n                         ) : (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Read\"\r\n                             onClick={() => setStatus(notification._id, true)}\r\n                           >\r\n                             radio_button_checked\r\n                           </i>\r\n                         )}\r\n                       </div>\r\n                       <div className=\"col s10 right\">\r\n                         <p onClick={() => openIncident(notification)}>\r\n                           {\" \"}\r\n                           {notification.NotifyAbout}\r\n                         </p>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Incident.js",["333"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Close\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) < currentDate ? \"red-text text-darken-2\" : \"green-text text-darken-2\";\r\n  \r\n    return (\r\n      <tr >\r\n        \r\n        <td\r\n          className=\"tbl-title\"\r\n          title={incident.Title}\r\n        >\r\n         <span className=\"indigo-text darken-4\" onClick = { () => openIncident(incident._id) }>\r\n               {incident.Title.length > 50 ? incident.Title.slice(0,50) + \" ...\" : incident.Title }\r\n         </span>\r\n        </td>\r\n        <td\r\n          className=\"tbl-description\"\r\n          title={incident.Description}\r\n        >\r\n          {incident.Description.length > 30 ? incident.Description.slice(0,30) + \" ...\" : incident.Description }\r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.createdAt).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.createdAt).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td>{statusName(incident.Status)}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Pages.js",["334","335"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\n\r\n\r\n\r\nexport default function Pages({TotalPages, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pages = [];\r\n    for(let i = 1; i <= Math.ceil(TotalPages / PostsPerPage) ; i++ )\r\n    {\r\n        pages.push(i);\r\n    }\r\n\r\n    const pageNumberClick = (p) =>{\r\n        if(p <1 || p > pages.length)\r\n            return;\r\n        setPageNumber(p);\r\n        setCurrentPage(p);\r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n    }, [search])\r\n\r\n    pages = pages.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"page active\" : \"page\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={() => pageNumberClick(p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n  \r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"input-field col s12 m4 l4\">\r\n                            <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                             ref={ddlRef}  >\t\t\t\t\t\t\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"35\">35</option>\r\n                                <option value=\"40\">40</option>\r\n                                <option value=\"45\">45</option>\r\n                                <option value=\"50\">50</option>\r\n                            </select>\t\r\n                        <label>Page Size</label>\t\t\t\t\t\t\r\n        </div>\r\n        <div className=\"input-field col s12 m8 l8\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>\r\n                </a>\r\n            </li>\r\n            {pages}\r\n            <li\r\n                className={ currentPage === pages.length ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Comments.js",["336","337","338","339"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../store/actions/incidentsActions\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"heading left-align\">Comments</h5>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment._id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}                       \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n      <div className=\"input-field\">\r\n        <textarea\r\n          id=\"comment\"\r\n          className=\"materialize-textarea\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <label htmlFor=\"comment\" className=\"\">\r\n          Comment\r\n        </label>\r\n      </div>\r\n      <div className=\"file-field input-field\">\r\n        <div className=\"btn indigo darken-2\">\r\n          <i className=\"material-icons \">attachment</i>\r\n          <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n        </div>\r\n        <div className=\"file-path-wrapper\">\r\n          <input\r\n            className=\"file-path validate\"\r\n            ref={newCommentFilesRef}\r\n            type=\"text\"\r\n            placeholder=\"Upload upto 3 files\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"input-field center \">\r\n        <button\r\n          className=\"left btn green darken-2 updateBtn\"\r\n          onClick={saveComment}\r\n        >\r\n          <span>Add</span>\r\n          <i className=\"material-icons right\">save</i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\AssigneeDropdown.js",["340","341"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    \r\n    const assigneeRef = useRef();\r\n\r\n    useEffect(() => {       \r\n        getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (userId) => {\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee._id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target=\"dropdownAssginee\"\r\n                            placeholder=\"\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          />\r\n\r\n                          <ul id=\"dropdownAssginee\" className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user._id}\r\n                                      onClick={() => assigneeSelected(user._id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Users\\User.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\incidentsActions.js",["342","343"],"import axios from 'axios';\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\nimport { incidentUpdatedSignalR } from \"../../signalR/sender\";\r\nimport qs from 'qs';\r\n\r\nexport var cancel;\r\n\r\nexport const incidentsWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.incidentsWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;     \r\n        axios({\r\n          method: \"GET\",\r\n          url: url,\r\n          cancelToken: new axios.CancelToken((c) => (cancel = c)),\r\n        })\r\n          .then((response) => {\r\n            const data = response.data;\r\n            dispatch({ type: \"INCIDENTS_WITH_PAGE\", data });\r\n          })\r\n          .catch((err) => {\r\n            if (axios.isCancel(err)) {\r\n              console.log(\"Request canceled\", err.message);\r\n              return;\r\n            }\r\n            console.log(err.message);\r\n            const data = err.message;\r\n            dispatch({ type: \"INCIDENTS_WITH_PAGE_ERROR\", data });\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewIncident = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewIncidentUrl\r\n    \r\n        axios({\r\n          method: 'post',          \r\n          url :incidentsUrls.addNewIncidentUrl,\r\n          headers: {\r\n            'Content-type': 'multipart/form-data',\r\n           // 'Content-Length': formData.length\r\n                  }, \r\n          data: formData//qs.stringify(formData)\r\n        })\r\n          .then((response)=>{ \r\n             const data = true;\r\n             console.log(response);\r\n             incidentUpdatedSignalR(response.data.Id);\r\n             dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n          })          \r\n          .catch((err)=>{  \r\n            const data = err.message;         \r\n            dispatch({ type: 'NEW_INCIDENT_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const addNewComment = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewCommentUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const comment = response.data;\r\n             //console.log(\"Comment\", comment);\r\n              dispatch({ type: 'ADD_NEW_COMMENT', data: comment });\r\n              incidentUpdatedSignalR(comment.IncidentId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while adding comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteComment = (commentId, incidentId, userId) => {\r\n    return (dispatch, getState) => {      \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteCommentUrl\r\n                    + \"commentId=\" + commentId\r\n                    + \"&incidentId=\" + incidentId\r\n                    + \"&userId=\" + userId\r\n        axios.get(url)\r\n          .then((response)=>{    \r\n              dispatch({ type: 'COMMENT_DELETED', data: commentId });\r\n              incidentUpdatedSignalR(incidentId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while delteing comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateIncident = (parameters) => {\r\n    return (dispatch, getState) => {      \r\n     // console.log(comment);\r\n     axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};     \r\n        axios({\r\n          method: 'post',          \r\n          url :incidentsUrls.updateIncidentUrl,\r\n          headers: { 'Content-type': 'application/json'}, \r\n         //json: true,\r\n          data: parameters\r\n        })\r\n          .then((response)=>{  \r\n              dispatch({ type: 'INCIDENTS_UPDATE', parameters });\r\n              incidentUpdatedSignalR(parameters.IncidentId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while updating incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateComment = (comment) => {\r\n    return (dispatch, getState) => { \r\n       axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateCommentUrl\r\n        axios.post(url, comment)\r\n          .then((response)=>{  \r\n            dispatch(getIncidentById(comment.IncidentId)); \r\n          incidentUpdatedSignalR(comment.IncidentId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while updating comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n\r\n  export const getIncidentById = (incidentId) => {\r\n    return (dispatch, getState) => {  \r\n       axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.getIncidentByIdUrl + incidentId; \r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                     \r\n              dispatch({ type: 'INCIDENTS_BY_ID', data });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while getting data for incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteAttachment = (type, userid, incidentId , file) => {\r\n    return (dispatch, getState) => {  \r\n        axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteAttachmentUrl\r\n                + \"type=\" + type\r\n                + \"&commentId=\" + file.CommentId \r\n                + \"&incidentId=\" + incidentId\r\n                + \"&userId=\" + userid\r\n                + \"&fileId=\" + file._id\r\n                + \"&filename=\" + file.FileName\r\n                + \"&contentType=\" + file.ContentType\r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                if (type === \"comment\")\r\n                  dispatch({ type: \"COMMENT_ATTACHMENT_DELETED\", data: file });\r\n                else\r\n                dispatch({ type: \"INCIDENT_ATTACHMENT_DELETED\", data: file });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            const data = \"while delteing attachment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const removeIncidentData = () => {       \r\n         return   { type: 'REMOVE_INCIDENT_DATA', data : null};\r\n         \r\n  }\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\usersActions.js",["344"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n      axios.defaults.headers = {'x-access-token': `${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\notificationsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\userLoginActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\api\\apiURLs.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Comment.js",["345","346","347","348","349","350"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\n\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment,\r\n  socket\r\n}) {\r\n  \r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      _id : comment._id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      createAt : new Date(),\r\n      CommentText : commentText,\r\n      //attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment._id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <p className=\"commentHeader darkslategrayText\">\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> added a\r\n        comment. -{\" \"}\r\n        <span\r\n          title={moment(comment.createdAt).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(comment.createdAt).fromNow()}{\" \"}\r\n        </span>\r\n        <span className=\"right\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons indigo-text darken-4 inline-icon\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text inline-icon\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            cancel\r\n          </i>\r\n        </span>\r\n      </p>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <p>\r\n        <ul className=\"commentFiles\">\r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <li key={file._id}>\r\n                    <a className=\"center indigo-text darken-4\">\r\n                      {!editComment ? null : (\r\n                        <i\r\n                          title=\"Remove\"\r\n                          className=\"actions-icon material-icons red-text inline-icon\"\r\n                          onClick={() => deleteFile(file)}\r\n                        >\r\n                          cancel\r\n                        </i>\r\n                      )}\r\n                      <span\r\n                        title={file.FileName}\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        {file.FileName.length > 40\r\n                          ? file.FileName.slice(0, 40) + \"...\"\r\n                          : file.FileName}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n              })}\r\n        </ul>\r\n      </p>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\signalR\\sender.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js",["351","352","353","354","355"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js",["356","357"],"import React,{useEffect, useState} from 'react'\r\nimport '../../../styles/kpibar.css'\r\nimport { GetKPI } from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction KPIBar({getKPIData, userId, kpiData}) {\r\n \r\n  //console.log(\"kpiData\",kpiData);\r\n  \r\n  useEffect(() => {    \r\n    getKPIData(userId); \r\n  }, [])\r\n\r\n \r\n    return (     \r\n      <div class=\"row kpibar\">       \r\n        <KPI value={kpiData.New} text=\"NEW\" color=\"orange darken-2\" />\r\n        <KPI value={kpiData.InProgress} text=\"IN PROGRESS\" color=\"blue darken-2\" />\r\n        <KPI value={kpiData.Closed} text=\"CLOSED\" color=\"green darken-1\" />\r\n        <KPI value={kpiData.Approved} text=\"APPROVED\" color=\"green darken-4\" />\r\n        <KPI value={kpiData.Late} text=\"LATE\" color=\"red darken-4\"/>\r\n        <KPI value={kpiData.AssignedToMe} text=\"ASSINGED TO YOU\" color=\"indigo darken-4\"/>        \r\n      </div>\r\n    );\r\n}\r\n\r\nfunction KPI({value, text, color}) {\r\n  return (\r\n    <div className=\"col l2 m6 s6\">\r\n      <div className={\"kpi \" + color}  >\r\n        <div className=\"kpi-value\">{value}</div>\r\n        <div className=\"kpi-text\">{text}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      kpiData: state.dashboard.KPIData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getKPIData : (userId) => dispatch(GetKPI(userId)),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KPIBar);\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\LastFive.js",["358","359","360"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetLast5Incidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\n\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction LastFive({Last5IncidentsData, getLast5IncidentsData, dispatch}) {\r\n\r\n  useEffect(() => {\r\n    getLast5IncidentsData();\r\n}, [])\r\n\r\n\r\nif(Last5IncidentsData == null || Last5IncidentsData.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\nconsole.log(\"Last5\", Last5IncidentsData);\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> Last 5 Incidents</h5>\r\n\r\n          {\r\n            Last5IncidentsData.map(incident => {\r\n              return (\r\n                <Incident incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Close\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Last5IncidentsData: state.dashboard.Last5IncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLast5IncidentsData: () => dispatch(GetLast5Incidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LastFive);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js",["361"],"import React ,{useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetOverallWidget} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction OverallWidget({overallWidgetData, getOverallWidgetData}) {\r\n    const [chartOptions, setChartOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        getOverallWidgetData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"overallWidgetData\", overallWidgetData);\r\n        const options = {\r\n            chart: {\r\n                type: 'pie',\r\n                height: (70) + '%',\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            credits:\r\n            {\r\n                enabled: false\r\n            },\r\n            tooltip: {\r\n                pointFormat: '{series.name}: <b>{point.y} ({point.percentage:.1f}%)</b>'\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    showInLegend: true\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Share',\r\n                data: [\r\n                    { name: 'New', y: overallWidgetData.New, color: '#F57C00' },\r\n                    { name: 'In Progress', y: overallWidgetData.InProgress, color: '#1976D2' },\r\n                    { name: 'Closed', y: overallWidgetData.Closed, color: '#43A047' },\r\n                    { name: 'Approved', y: overallWidgetData.Approved, color: '#1B5E20' },\r\n                    { name: 'Late', y: overallWidgetData.Late, color: '#B71C1C' }\r\n                ]\r\n            }]\r\n        }\r\n\r\n        setChartOptions(options);\r\n    }, [overallWidgetData])\r\n\r\n\r\n    return (\r\n        <div className=\"col s12 m12 l6 widget\">\r\n            <h5> Overall</h5>\r\n            <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{   \r\n        userId :state.userLogin.userId,  // logged in User Id  \r\n        overallWidgetData: state.dashboard.OverallWidgetData\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getOverallWidgetData: () => dispatch(GetOverallWidget()),     \r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallWidget);\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js",["362","363"],"import React, {useEffect} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetMostAssignedToUsers} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction MostAssignedByUser({MostAssignedIncidentsData, getMostAssignedToUsers}) {\r\n\r\n  useEffect(() => {\r\n    getMostAssignedToUsers();\r\n  }, []);\r\n\r\n   if(MostAssignedIncidentsData.length ===0 || MostAssignedIncidentsData == null )\r\n   return (<h3>loading..</h3>);\r\n\r\n  let data = [];\r\n\r\n  try{\r\n    data =  [\r\n      { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count), color:'#B71C1C' },\r\n      { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count), color:'#E53935' },\r\n      { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color:'#EF5350' },\r\n      { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color:'#E57373' },\r\n      { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color:'#FFCDD2' }                \r\n  ];\r\n\r\n  }\r\n  catch(err){\r\n    console.log(\"error\", err);\r\n  }\r\n\r\n    const options = {\r\n        title: {\r\n          text: 'My chart'\r\n        },\r\n        chart: {    \r\n          type: 'bar',\r\n          height: (70) + '%',\r\n          //width: (100) + '%',\r\n         },\r\n         title:{\r\n            text:''\r\n        },\r\n        credits:\r\n        {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: ''\r\n            }\r\n        },\r\n    \r\n        xAxis: {\r\n            type: 'category',\r\n            min: 0,\r\n            labels: {\r\n                animate: true\r\n            }\r\n        },\r\n      \r\n         series: [{\r\n          name: '',\r\n          dataSorting: {\r\n            enabled: true,\r\n            sortKey: 'y'\r\n        },\r\n          data: data\r\n      }]\r\n      }\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6 widget\">\r\n        <div className=\"\">\r\n          <h5> Most Assigned To Users</h5>\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      MostAssignedIncidentsData: state.dashboard.MostAssignedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMostAssignedToUsers: () => dispatch(GetMostAssignedToUsers()),     \r\n  }\r\n}\r\n\r\n// create \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MostAssignedByUser);\r\n\r\n//please invert binary tree\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js",["364","365","366"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetOldest5UnresolvedIncidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction FiveOldestOpenIncidents({Oldest5UnresolvedIncidents, getOldest5UnresolvedIncidents}) {\r\n\r\n  useEffect(() => {\r\n    getOldest5UnresolvedIncidents();\r\n}, [])\r\n\r\nif(Oldest5UnresolvedIncidents == null || Oldest5UnresolvedIncidents.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> 5 Oldest Unresolved Incidents</h5>\r\n\r\n          {\r\n            Oldest5UnresolvedIncidents.map(incident => {\r\n              return (\r\n                <Incident incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Close\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Oldest5UnresolvedIncidents: state.dashboard.Oldest5UnresolvedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getOldest5UnresolvedIncidents: () => dispatch(GetOldest5UnresolvedIncidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiveOldestOpenIncidents);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_MERN_Stack\\IM_MERN_React\\src\\store\\actions\\dashboardActions.js",[],{"ruleId":"367","replacedBy":"368"},{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","severity":1,"message":"372","line":46,"column":20,"nodeType":"373","messageId":"374","endLine":46,"endColumn":24},{"ruleId":"371","severity":1,"message":"375","line":2,"column":8,"nodeType":"373","messageId":"374","endLine":2,"endColumn":10},{"ruleId":"376","severity":1,"message":"377","line":25,"column":11,"nodeType":"378","endLine":25,"endColumn":77},{"ruleId":"376","severity":1,"message":"379","line":48,"column":14,"nodeType":"378","endLine":48,"endColumn":17},{"ruleId":"376","severity":1,"message":"379","line":64,"column":18,"nodeType":"378","endLine":64,"endColumn":21},{"ruleId":"376","severity":1,"message":"377","line":68,"column":15,"nodeType":"378","endLine":68,"endColumn":50},{"ruleId":"380","severity":1,"message":"381","line":38,"column":8,"nodeType":"382","endLine":38,"endColumn":16,"suggestions":"383"},{"ruleId":"376","severity":1,"message":"379","line":44,"column":15,"nodeType":"378","endLine":44,"endColumn":19},{"ruleId":"376","severity":1,"message":"379","line":17,"column":19,"nodeType":"378","endLine":17,"endColumn":53},{"ruleId":"376","severity":1,"message":"379","line":22,"column":19,"nodeType":"378","endLine":22,"endColumn":51},{"ruleId":"376","severity":1,"message":"379","line":27,"column":19,"nodeType":"378","endLine":27,"endColumn":52},{"ruleId":"380","severity":1,"message":"384","line":45,"column":8,"nodeType":"382","endLine":45,"endColumn":10,"suggestions":"385"},{"ruleId":"380","severity":1,"message":"386","line":27,"column":8,"nodeType":"382","endLine":27,"endColumn":38,"suggestions":"387"},{"ruleId":"371","severity":1,"message":"388","line":1,"column":17,"nodeType":"373","messageId":"374","endLine":1,"endColumn":23},{"ruleId":"371","severity":1,"message":"389","line":3,"column":8,"nodeType":"373","messageId":"374","endLine":3,"endColumn":9},{"ruleId":"380","severity":1,"message":"390","line":34,"column":7,"nodeType":"382","endLine":34,"endColumn":9,"suggestions":"391"},{"ruleId":"380","severity":1,"message":"392","line":40,"column":8,"nodeType":"382","endLine":40,"endColumn":10,"suggestions":"393"},{"ruleId":"367","replacedBy":"394"},{"ruleId":"369","replacedBy":"395"},{"ruleId":"371","severity":1,"message":"396","line":2,"column":27,"nodeType":"373","messageId":"374","endLine":2,"endColumn":43},{"ruleId":"380","severity":1,"message":"384","line":15,"column":10,"nodeType":"382","endLine":15,"endColumn":12,"suggestions":"397"},{"ruleId":"367","replacedBy":"398"},{"ruleId":"369","replacedBy":"399"},{"ruleId":"376","severity":1,"message":"377","line":25,"column":11,"nodeType":"378","endLine":25,"endColumn":77},{"ruleId":"376","severity":1,"message":"379","line":48,"column":14,"nodeType":"378","endLine":48,"endColumn":17},{"ruleId":"376","severity":1,"message":"379","line":64,"column":18,"nodeType":"378","endLine":64,"endColumn":21},{"ruleId":"376","severity":1,"message":"377","line":68,"column":15,"nodeType":"378","endLine":68,"endColumn":50},{"ruleId":"380","severity":1,"message":"386","line":21,"column":8,"nodeType":"382","endLine":21,"endColumn":10,"suggestions":"400"},{"ruleId":"380","severity":1,"message":"386","line":37,"column":8,"nodeType":"382","endLine":37,"endColumn":38,"suggestions":"401"},{"ruleId":"371","severity":1,"message":"402","line":29,"column":10,"nodeType":"373","messageId":"374","endLine":29,"endColumn":18},{"ruleId":"380","severity":1,"message":"403","line":54,"column":6,"nodeType":"382","endLine":54,"endColumn":23,"suggestions":"404"},{"ruleId":"380","severity":1,"message":"405","line":69,"column":6,"nodeType":"382","endLine":69,"endColumn":20,"suggestions":"406"},{"ruleId":"407","severity":1,"message":"408","line":94,"column":28,"nodeType":"409","messageId":"410","endLine":94,"endColumn":29},{"ruleId":"376","severity":1,"message":"379","line":310,"column":23,"nodeType":"378","endLine":310,"endColumn":47},{"ruleId":"380","severity":1,"message":"384","line":45,"column":8,"nodeType":"382","endLine":45,"endColumn":10,"suggestions":"411"},{"ruleId":"380","severity":1,"message":"386","line":27,"column":8,"nodeType":"382","endLine":27,"endColumn":38,"suggestions":"412"},{"ruleId":"371","severity":1,"message":"388","line":1,"column":17,"nodeType":"373","messageId":"374","endLine":1,"endColumn":23},{"ruleId":"371","severity":1,"message":"389","line":3,"column":8,"nodeType":"373","messageId":"374","endLine":3,"endColumn":9},{"ruleId":"380","severity":1,"message":"413","line":26,"column":8,"nodeType":"382","endLine":26,"endColumn":10,"suggestions":"414"},{"ruleId":"376","severity":1,"message":"379","line":17,"column":19,"nodeType":"378","endLine":17,"endColumn":53},{"ruleId":"376","severity":1,"message":"379","line":22,"column":19,"nodeType":"378","endLine":22,"endColumn":51},{"ruleId":"376","severity":1,"message":"379","line":27,"column":19,"nodeType":"378","endLine":27,"endColumn":52},{"ruleId":"380","severity":1,"message":"390","line":34,"column":7,"nodeType":"382","endLine":34,"endColumn":9,"suggestions":"415"},{"ruleId":"371","severity":1,"message":"416","line":33,"column":9,"nodeType":"373","messageId":"374","endLine":33,"endColumn":23},{"ruleId":"380","severity":1,"message":"381","line":38,"column":8,"nodeType":"382","endLine":38,"endColumn":16,"suggestions":"417"},{"ruleId":"376","severity":1,"message":"379","line":44,"column":15,"nodeType":"378","endLine":44,"endColumn":19},{"ruleId":"371","severity":1,"message":"418","line":1,"column":17,"nodeType":"373","messageId":"374","endLine":1,"endColumn":26},{"ruleId":"371","severity":1,"message":"419","line":2,"column":8,"nodeType":"373","messageId":"374","endLine":2,"endColumn":14},{"ruleId":"371","severity":1,"message":"420","line":7,"column":8,"nodeType":"373","messageId":"374","endLine":7,"endColumn":22},{"ruleId":"371","severity":1,"message":"421","line":20,"column":9,"nodeType":"373","messageId":"374","endLine":20,"endColumn":16},{"ruleId":"371","severity":1,"message":"396","line":2,"column":27,"nodeType":"373","messageId":"374","endLine":2,"endColumn":43},{"ruleId":"380","severity":1,"message":"384","line":15,"column":10,"nodeType":"382","endLine":15,"endColumn":12,"suggestions":"422"},{"ruleId":"371","severity":1,"message":"375","line":4,"column":8,"nodeType":"373","messageId":"374","endLine":4,"endColumn":10},{"ruleId":"371","severity":1,"message":"423","line":39,"column":15,"nodeType":"373","messageId":"374","endLine":39,"endColumn":18},{"ruleId":"371","severity":1,"message":"372","line":46,"column":20,"nodeType":"373","messageId":"374","endLine":46,"endColumn":24},{"ruleId":"371","severity":1,"message":"418","line":1,"column":17,"nodeType":"373","messageId":"374","endLine":1,"endColumn":26},{"ruleId":"371","severity":1,"message":"388","line":1,"column":38,"nodeType":"373","messageId":"374","endLine":1,"endColumn":44},{"ruleId":"371","severity":1,"message":"424","line":21,"column":10,"nodeType":"373","messageId":"374","endLine":21,"endColumn":15},{"ruleId":"371","severity":1,"message":"425","line":21,"column":17,"nodeType":"373","messageId":"374","endLine":21,"endColumn":25},{"ruleId":"376","severity":1,"message":"379","line":83,"column":9,"nodeType":"378","endLine":83,"endColumn":33},{"ruleId":"376","severity":1,"message":"379","line":137,"column":21,"nodeType":"378","endLine":137,"endColumn":64},{"ruleId":"371","severity":1,"message":"426","line":4,"column":8,"nodeType":"373","messageId":"374","endLine":4,"endColumn":21},{"ruleId":"371","severity":1,"message":"427","line":5,"column":8,"nodeType":"373","messageId":"374","endLine":5,"endColumn":16},{"ruleId":"371","severity":1,"message":"428","line":7,"column":8,"nodeType":"373","messageId":"374","endLine":7,"endColumn":26},{"ruleId":"371","severity":1,"message":"429","line":8,"column":8,"nodeType":"373","messageId":"374","endLine":8,"endColumn":21},{"ruleId":"371","severity":1,"message":"430","line":9,"column":8,"nodeType":"373","messageId":"374","endLine":9,"endColumn":31},{"ruleId":"371","severity":1,"message":"431","line":1,"column":26,"nodeType":"373","messageId":"374","endLine":1,"endColumn":34},{"ruleId":"380","severity":1,"message":"432","line":12,"column":6,"nodeType":"382","endLine":12,"endColumn":8,"suggestions":"433"},{"ruleId":"371","severity":1,"message":"431","line":1,"column":27,"nodeType":"373","messageId":"374","endLine":1,"endColumn":35},{"ruleId":"380","severity":1,"message":"434","line":12,"column":4,"nodeType":"382","endLine":12,"endColumn":6,"suggestions":"435"},{"ruleId":"376","severity":1,"message":"379","line":75,"column":11,"nodeType":"378","endLine":75,"endColumn":56},{"ruleId":"380","severity":1,"message":"436","line":12,"column":8,"nodeType":"382","endLine":12,"endColumn":10,"suggestions":"437"},{"ruleId":"380","severity":1,"message":"438","line":11,"column":6,"nodeType":"382","endLine":11,"endColumn":8,"suggestions":"439"},{"ruleId":"440","severity":1,"message":"441","line":41,"column":10,"nodeType":"442","messageId":"443","endLine":41,"endColumn":15},{"ruleId":"371","severity":1,"message":"431","line":1,"column":27,"nodeType":"373","messageId":"374","endLine":1,"endColumn":35},{"ruleId":"380","severity":1,"message":"444","line":11,"column":4,"nodeType":"382","endLine":11,"endColumn":6,"suggestions":"445"},{"ruleId":"376","severity":1,"message":"379","line":72,"column":11,"nodeType":"378","endLine":72,"endColumn":56},"no-native-reassign",["446"],"no-negated-in-lhs",["447"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'qs' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPageNumber'. Either include it or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["448"],"React Hook useEffect has a missing dependency: 'getAllAssignees'. Either include it or remove the dependency array. If 'getAllAssignees' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["449"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["450"],"'useRef' is defined but never used.","'M' is defined but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["451"],"React Hook useEffect has missing dependencies: 'commentRecieved', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["452"],["446"],["447"],"'deleteAttachment' is defined but never used.",["453"],["446"],["447"],["454"],["455"],"'assignee' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getIncidentById'. Either include it or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["456"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["457"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["458"],["459"],"React Hook useEffect has missing dependencies: 'refreshNotifications', 'token', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["460"],["461"],"'dateDifference' is assigned a value but never used.",["462"],"'useEffect' is defined but never used.","'moment' is defined but never used.","'socketIOClient' is defined but never used.","'history' is assigned a value but never used.",["463"],"'url' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'OverallWidget' is defined but never used.","'LastFive' is defined but never used.","'MostAssignedByUser' is defined but never used.","'DayByDayCount' is defined but never used.","'FiveOldestOpenIncidents' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getKPIData' and 'userId'. Either include them or remove the dependency array. If 'getKPIData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["464"],"React Hook useEffect has a missing dependency: 'getLast5IncidentsData'. Either include it or remove the dependency array. If 'getLast5IncidentsData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["465"],"React Hook useEffect has a missing dependency: 'getOverallWidgetData'. Either include it or remove the dependency array. If 'getOverallWidgetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["466"],"React Hook useEffect has a missing dependency: 'getMostAssignedToUsers'. Either include it or remove the dependency array. If 'getMostAssignedToUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["467"],"no-dupe-keys","Duplicate key 'title'.","ObjectExpression","unexpected","React Hook useEffect has a missing dependency: 'getOldest5UnresolvedIncidents'. Either include it or remove the dependency array. If 'getOldest5UnresolvedIncidents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["468"],"no-global-assign","no-unsafe-negation",{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"471","fix":"479"},{"desc":"480","fix":"481"},{"desc":"473","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"471","fix":"487"},{"desc":"473","fix":"488"},{"desc":"489","fix":"490"},{"desc":"475","fix":"491"},{"desc":"469","fix":"492"},{"desc":"471","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},"Update the dependencies array to be: [search, setPageNumber]",{"range":"504","text":"505"},"Update the dependencies array to be: [getAllAssignees]",{"range":"506","text":"507"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"508","text":"509"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"510","text":"511"},"Update the dependencies array to be: [commentRecieved, refreshNotifications, updateHubId, userId]",{"range":"512","text":"513"},{"range":"514","text":"507"},"Update the dependencies array to be: [props]",{"range":"515","text":"516"},{"range":"517","text":"509"},"Update the dependencies array to be: [getIncidentById, match.params.id]",{"range":"518","text":"519"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"520","text":"521"},{"range":"522","text":"507"},{"range":"523","text":"509"},"Update the dependencies array to be: [refreshNotifications, token, updateHubId, userId]",{"range":"524","text":"525"},{"range":"526","text":"511"},{"range":"527","text":"505"},{"range":"528","text":"507"},"Update the dependencies array to be: [getKPIData, userId]",{"range":"529","text":"530"},"Update the dependencies array to be: [getLast5IncidentsData]",{"range":"531","text":"532"},"Update the dependencies array to be: [getOverallWidgetData]",{"range":"533","text":"534"},"Update the dependencies array to be: [getMostAssignedToUsers]",{"range":"535","text":"536"},"Update the dependencies array to be: [getOldest5UnresolvedIncidents]",{"range":"537","text":"538"},[944,952],"[search, setPageNumber]",[1738,1740],"[getAllAssignees]",[807,837],"[PageNumber, PageSize, Search, props]",[984,986],"[getNotifications, userId]",[1426,1428],"[commentRecieved, refreshNotifications, updateHubId, userId]",[601,603],[746,748],"[props]",[1135,1165],[1835,1852],"[getIncidentById, match.params.id]",[2455,2469],"[allAssignees, incidentData]",[1738,1740],[807,837],[940,942],"[refreshNotifications, token, updateHubId, userId]",[984,986],[944,952],[601,603],[345,347],"[getKPIData, userId]",[384,386],"[getLast5IncidentsData]",[454,456],"[getOverallWidgetData]",[400,402],"[getMostAssignedToUsers]",[423,425],"[getOldest5UnresolvedIncidents]"]